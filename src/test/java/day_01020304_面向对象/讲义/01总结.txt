1. 继承    【理解】    extends
    一个类与另一个类通过extends关键字，产生子父类关系。
    儿子可以直接使用父亲的非私有所有东西。

    Java中的类，只有单继承，多层继承。
        没有什么母子关系或者兄弟关系。

    使用场景：
        当【多个类】中，有较多的【共性内容】，那么则可以考虑创建一个【父类】，父类中，【抽取子类中的共性内容】。
        子类就可以直接使用了。
        可以提高所有子类的代码【复用性】。

        注意不能瞎继承：   is a 什么是什么的一种。
            Student extends Person  可以！
            Dog extends Person 不行。
            Dog extends Animal 可以。

    好处：
        【复用性】和维护性。

    弊端：   高内聚，低耦合。
        提高了代码之间的耦合性。

        女性：
            古代：高耦合。
                为夫纲，完全依附于男人。
            现代：低耦合。
                女人自身能力很强。
                不依赖于任何一个男人，自己也能活的很好。

    成员(变量、方法)访问特点：
        自己有，优先使用自己的。
        没有，再找父类要。

    构造方法的执行流程：   【理解-为了面试】
        1. 创建子类对象时，一定会(super();)优先初始化父类。
        2. 初始化父类，会优先初始化父类的成员变量。
            因为父类中，也有可能使用的到成员变量。
        3. 初始化父类完毕之后，才会回头初始化子类。
        4. 初始化子类，也会优先初始化子类的成员变量。
            因为子类中，也有可能使用的到成员变量。

    this:
        优先访问子类的成员，
        如果子类没有，可以访问父类成员。
    super：
        只能访问父类的成员(变量和方法)。

    重载：Overload
        同一个类中，多个方法名相同，参数列表不同的一种情况。
            参数列表不同：
                个数不同。
                对应的类型不同。

    重写：Override   【覆盖】
        子父类关系中，两个方法的声明完全相同，就是方法重写。

        因为父类方法不满足子类需求，所以子类自己来。




    权限修饰符：      【理解】
        修饰类、方法、变量。
        用来限制被修饰的成员的访问权限。
                      同类      同包        不同包子类中      不同包，无关类
        [public]       √        √               √               √
        protected      √        √               √
        默认           √        √
        [private]      √

    final:  最终的。    【理解】
        修饰类、方法、变量。
            类：  太监类。
                被能被继承。
                不想其他人重写该类的所有方法，所以不允许有子类。
            方法：
                该方法不能被重写。
                不想其他人重写某些方法，所以被用final修饰。
            变量：
                变成常量。
                    基本类型：
                        其数据值不可变。
                    引用类型：
                        其地址值不可变，但是对象中的数据可变。

    static:  静态的。  【理解】
        修饰方法、变量。
            变量：
                该变量变成一个所有对象的共享数据。
            方法：
                类名直接调用。

        使用场景：
            变量：当某个类中，有某些变量是共享数据，则可以【考虑】使用static对其修饰。
                好处：只需要被赋值一次，所有对象共享该数据。
            方法：当某个方法中，没有使用到任何非静态成员，或只使用到静态成员，就可以【考虑】使用static修饰。