1. 面向对象
    Object 是所有引用数据类型的直接或间接的父类。

    三大特征：
        封装：打包！
            类：变量和方法。
            方法：代码。
            private: 私有变量。
        继承：   extends
            子类可以直接使用父类的所有非私有成员。
        多态：
            父类可以创建子类对象。
            Student s = new Student();
            Person p = new Student();

        add(10);
        int b = 100;
        add(b);
        public void add(int a){}  // int a = 100;  int a = 10;

        Fu s = new Fu();
        领物资(s);

        public void 领物资(Fu s){}  // Student s = new Student();


        Zi s = new Zi();
        method(s);
        Son s = new Son();
        method(s);
        public void 领物资(Fu p){}  // Person p = new Student();   Person p = new Teacher();


    多态：
        同一个事物，在不同时刻呈现出来的不同形态。
        帅博 - 老公 - 儿子 - 孙子 - 老板 - 贵宾。
        水 - 水蒸气 - 冰。

        前提：
            1. 一定要有继承或实现关系。
            2. 要有方法重写。
            3. 【父类引用指向子类对象】。

        成员访问特点：
            成员变量：编译看左边，运行看左边。
            成员方法：编译看左边，运行看右边。

            Person p = new Student();
            p.age;
            p.method(); // 静态
            p.show();   // 成员方法

            静态绑定：
                当类一加载，则会将某些成员同该类绑定在一起。
                static/final/private/构造方法，这些成员都会直接同类绑定在一起。
            动态绑定：
                在程序运行的时候，才知道，到底运行的是谁。
                成员方法。因为父类的成员方法，可能被子类覆盖(重写)。

        优点和缺点：
            优点:
                提高代码的扩展性。

            缺点：
                不能使用子类的特有成员。

        类型转换：
            基本类型：
                隐式类型转换：  小 -> 大
                    byte a = 10;
                    int b = a;

                强制类型转换：  大 -> 小
                    int a = 100;
                    byte b = (byte)a;
                    问题：
                        1. 数据丢失
                        2. 精度丢失

            引用类型：
                向上转型：  子 -> 父
                    Student s = new Student();
                    Person p = s;

                向下转型：  父 -> 子
                    Person p = new Student();
                    // 想要调用子类的特有成员
                    Student s = (Student)p;

                instanceof 判断左边的对象是否是右边类型或者子类
                问题：
                    类型转换异常。ClassCastException

2. 抽象类  【了解】
    唯一作用：作为父类存在的。
        父类的价值：
            提供资源给子类使用。

        普通父类：慈父
            给子类提供资源，但不对子类有任何要求。
        抽象父类：严父
            给子类提供资源，但是会给子类制定【规则】。

        特点：
            1. 不能创建对象。
                1. 不合理。
                2. 有抽象方法，而抽象方法没有方法体，调用没有意义。
            2. 有抽象方法【规则】。
                没有方法体的方法，要求子类必须重写。
                如果子类不重写，那么子类也必须是抽象类。

        成员特点：
            和普通类没有区别，唯一多了一个抽象方法。

            为何不能创建对象，却有构造方法？
                因为他有成员变量，构造方法可以给成员变量赋值。

            那么抽象类的构造方法如何调用呢？
                在子类的构造方法中，通过super()去调用。

3. 接口  【理解】
    定义：interface
    实现：implements

    接口就是[规则]。
        因为它只有抽象方法，要求子类必须重写。
    给子类提供扩展。

    接口存在的价值，为了解决java中的单继承问题。

    常量的命名规则：
        所有单词全部大写。
        每个单词之间，用下划线隔开。

    成员：
        静态常量：  int NUMBER_MAX = 10;
            默认被 public static fianl 修饰。
        【抽象方法】：
            给子类制定规则。
        默认方法：
            解决接口升级的问题。
            就是为了提供给子类使用。
            public default void show(){

            }
        静态方法：
            让接口在没有子类的情况下，与拥有一些自己的功能。
            public static void add(){

            }
        私有方法： JDK 9 产物
            抽取接口中方法的共性内容。


    类与接口：
        实现关系，多实现，多层实现。

    接口与接口：
        多继承、多层继承。

    接口与抽象类的区别？
        抽象类:
            抽取子类中的共性内容(成员变量和成员方法)，提供给子类使用。
        接口：
            从下往上看：抽取子类中的共性方法(抽取方法的声明)。
            从上往下看：给子类制定规则。




总结：
    1. 多态
        从今天开始，你可以使用【父类创建子类对象】了。

        Inter i = new MyInter();

        向下转型： 强行把父类的引用，转成子类的引用。
            作用：为了使用子类特有的成员。
        MyInter m = (MyInter)i;

    2. 抽象类
        严父：给子类提供【资源】(成员变量和成员方法)的同时，给子类制定规则(抽象方法)。

        特点：
            1. 不能创建对象
            2. 子类必须重写抽象父类的所有抽象方法。

    3. 接口
        规则。
        给子类制定规则，给子类提供扩展。

        接口与类的关系：
            多实现，多层实现。

        接口与接口的关系：
            多继承、多层继承。















大禹与悟空的身世之谜：

大禹：治水-定海神针，三过家门而不入
妻子：涂山氏

大禹为了治水，三过家门而不入，这么漂亮的老婆，不用那不是浪费了，但又没进门，叫老婆出来，玩一点野的(野战方法)。
大禹治水就会去接受舜的禅让当了皇。他老婆涂山氏就一直在东海旁等着他老公回来，但是一直没回来，时间长了，就变成一颗望夫石。

孙悟空：
    东海旁的一颗石头里蹦出来的。
    武器，如意金箍棒(定海神针)。

class 大禹{
    武器 = "定海神针";

    public void 野战(){
        sout("玩一点野的！");
    }
}

class 孙悟空 extends 大禹 implements 菩提老祖,唐僧{
    public void 耍棍(){
        sout(super.武器);
    }

    public void 野战(){
        sout("大战七仙女！");
    }

    public void 筋斗云(){}
    public void 地煞七十二变(){}
    public void 取经(){}
}


interface 菩提老祖 {
    public void 筋斗云();
    public void 地煞七十二变();
    public default void 地煞一百零八变(){

    }
}

interface 唐僧{
    public void 取经();
}
